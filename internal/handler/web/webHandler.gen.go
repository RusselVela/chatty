// Package web provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package web

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	JwtAuthScopes = "jwtAuth.Scopes"
)

// FailedSchema defines model for FailedSchema.
type FailedSchema struct {
	Error string `json:"error"`
	Ok    bool   `json:"ok"`
}

// InternalServerErrorSchema defines model for InternalServerErrorSchema.
type InternalServerErrorSchema struct {
	Error string `json:"error"`
}

// LoginSchema defines model for LoginSchema.
type LoginSchema struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// SignUpSchema defines model for SignUpSchema.
type SignUpSchema = LoginSchema

// SuccessLoginSchema defines model for SuccessLoginSchema.
type SuccessLoginSchema struct {
	Ok    bool   `json:"ok"`
	Token string `json:"token"`
}

// SuccessSignupSchema defines model for SuccessSignupSchema.
type SuccessSignupSchema struct {
	Id       string `json:"id"`
	Ok       bool   `json:"ok"`
	Username string `json:"username"`
}

// SuccessWsConnectionSchema defines model for SuccessWsConnectionSchema.
type SuccessWsConnectionSchema struct {
	Ok        bool   `json:"ok"`
	Timestamp string `json:"timestamp"`
}

// UnauthorizedSchema defines model for UnauthorizedSchema.
type UnauthorizedSchema struct {
	Message string `json:"message"`
}

// N200SuccessfulLogin defines model for 200SuccessfulLogin.
type N200SuccessfulLogin = SuccessLoginSchema

// N200SuccessfulWsConnection defines model for 200SuccessfulWsConnection.
type N200SuccessfulWsConnection = SuccessWsConnectionSchema

// N201SuccessfulSignUp defines model for 201SuccessfulSignUp.
type N201SuccessfulSignUp = SuccessSignupSchema

// N400FailedSignUp defines model for 400FailedSignUp.
type N400FailedSignUp = FailedSchema

// N400FailedWsConnection defines model for 400FailedWsConnection.
type N400FailedWsConnection = FailedSchema

// N401FailedLogin defines model for 401FailedLogin.
type N401FailedLogin = FailedSchema

// N401UnauthorizedError defines model for 401UnauthorizedError.
type N401UnauthorizedError = UnauthorizedSchema

// N500InternalServerError defines model for 500InternalServerError.
type N500InternalServerError = InternalServerErrorSchema

// LoginRequest defines model for LoginRequest.
type LoginRequest = LoginSchema

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest = SignUpSchema

// PublicPostSignupJSONRequestBody defines body for PublicPostSignup for application/json ContentType.
type PublicPostSignupJSONRequestBody = SignUpSchema

// PublicPostLoginJSONRequestBody defines body for PublicPostLogin for application/json ContentType.
type PublicPostLoginJSONRequestBody = LoginSchema

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Connects to Chatty to send and receive messages
	// (GET /v1/chatty/chats/ws)
	PublicPostWs(ctx echo.Context) error
	// Registers a new user
	// (POST /v1/chatty/signup)
	PublicPostSignup(ctx echo.Context) error
	// Returns a token
	// (POST /v1/chatty/token)
	PublicPostLogin(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PublicPostWs converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostWs(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostWs(ctx)
	return err
}

// PublicPostSignup converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostSignup(ctx)
	return err
}

// PublicPostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostLogin(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/chatty/chats/ws", wrapper.PublicPostWs)
	router.POST(baseURL+"/v1/chatty/signup", wrapper.PublicPostSignup)
	router.POST(baseURL+"/v1/chatty/token", wrapper.PublicPostLogin)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXwW7jNhD9FYIt0IsQ2e32olPTRRfIYosGcdIcAh9oaiwxS5FaDmXDDfzvxZCyLUdS",
	"7HTdk2Vy+Pg4bzgzfOHSVrU1YDzy7IU7+NYA+t9triAMfLGFMndxlP5LazyY8CnqWispvLImfUZraAxl",
	"CZWgrx8dLHnGf0gPG6RxFtMAOoum2+024TmgdKomKJ7x+xJYS4R5yzRZ823CZ6owD/WlyUTUs9mgKkxT",
	"c7JzgLU1GB3182Qya6QExGWjwwEvxzDinvBamGYKGe5pkNOOeD3iR2sMyLjksvS62OMs/wREUQBDML7D",
	"VG8i1+mBa9Tl0ixnQb5xfnG+78YPk8knoTTkF6bVgo7yeUBwzFjPpAPhIWd5AxSGUivyIDhn3RG//0Xi",
	"Uyx3qhLRoOwoy2mEuuwFOUUvzh8SyYfJ9MGIxpfWqX8g/yPQuxSZLvI4pc+P98zbrxBubKUQlSmYdUyZ",
	"ldAqJ5a/TiY3xoMzQs/ArcBdlucA9jjdnTGL1ixSIbsWjnY7kiF74bWzNTjfVhLYsfebGnjG0TtlCjqo",
	"/doZXlirQZg2wX5rlIOcZ09klLQY82RnbBfPID1hjJ/mbCKvNhzfq5uIe+i1QFxbl9P30rpKeJ4dBpP+",
	"6Rsk4hWcZrS3TA6AQ/yOKhrFiNZ/LXn29I6iPCeYftnpnXZYuoSH0D7TBUNCx/WDhxvI4z1aKn9HoL1H",
	"gkCuo4PK3yI5UBLP96CqAL2o6jNJHeyHCA0kpR6TKibx0/vtDPsbUT4A2TjlN2GXCPy89teNL+lzAcKB",
	"+7QLis+P97xNIeH4YfYQIaX3dcxGyiztLvMJGTIfVEJpnvEVaHHlGkTQvxU0diVtxRMeBeV3YYb9DVrw",
	"Xlq7vr0JZcpWVWMojQJThjkQmpE/2Vr5ktUADoOHvX6F+BOyj6XwfsMQ3EpJCokVOIzoq2kIuhqMqBXP",
	"+C9Xk6tJuLy+DI5JV9NUhvXhB9N1GC4gHPCYahtJSHzjnjxgu5D7b3Ke8dtmoZW8tegfie/r9nSsIOzt",
	"0vFeMXYYpxGG25BYcs9ZPVCXYyU8vXikXHZjMuTAfTQ+zbfzhGNTVcJtBj0c+n0wORMmZw4kqBWwNvpD",
	"RIgC6UJEx/M57dXRtH0q0EWzOCDpHRQKPThkghlYM8orb4gaUx5POo+0zbhbOu+49Pjh1H+5TM8JjX5r",
	"/u6gOKz7bkX3qo048YQ0+/o0poxvnCHI2KN5yxZA0Dnlh2XjfAmO7YXCN1SLne5/EO3o5b397uv8pdP8",
	"nnUTu436hRU7cu6gWOHSEgCGO9s4yvTaSqFLiz6lzDrfr3utXh1g2PXtDR7qQIu9nW//DQAA//9mamGZ",
	"9BAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
