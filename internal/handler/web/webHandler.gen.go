// Package web provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package web

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	JwtAuthScopes = "jwtAuth.Scopes"
)

// ChannelCreation defines model for ChannelCreation.
type ChannelCreation struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

// ChannelSubscription defines model for ChannelSubscription.
type ChannelSubscription = map[string]interface{}

// FailedSchema An error code and message
type FailedSchema struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// LoginSchema defines model for LoginSchema.
type LoginSchema struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// SignUpSchema defines model for SignUpSchema.
type SignUpSchema = LoginSchema

// SuccessChannelCreation defines model for SuccessChannelCreation.
type SuccessChannelCreation struct {
	Name string `json:"name"`
	Ok   bool   `json:"ok"`
}

// SuccessChannelSubscription defines model for SuccessChannelSubscription.
type SuccessChannelSubscription struct {
	Name string `json:"name"`
	Ok   bool   `json:"ok"`
}

// SuccessLoginSchema defines model for SuccessLoginSchema.
type SuccessLoginSchema struct {
	Ok    bool   `json:"ok"`
	Token string `json:"token"`
}

// SuccessSignupSchema defines model for SuccessSignupSchema.
type SuccessSignupSchema struct {
	Id       string `json:"id"`
	Ok       bool   `json:"ok"`
	Username string `json:"username"`
}

// SuccessWsConnectionSchema defines model for SuccessWsConnectionSchema.
type SuccessWsConnectionSchema struct {
	Ok        bool   `json:"ok"`
	Timestamp string `json:"timestamp"`
}

// UnauthorizedSchema defines model for UnauthorizedSchema.
type UnauthorizedSchema struct {
	Message string `json:"message"`
}

// N200SuccessChannelSubscribe defines model for 200SuccessChannelSubscribe.
type N200SuccessChannelSubscribe = SuccessChannelSubscription

// N200SuccessfulLogin defines model for 200SuccessfulLogin.
type N200SuccessfulLogin = SuccessLoginSchema

// N200SuccessfulWsConnection defines model for 200SuccessfulWsConnection.
type N200SuccessfulWsConnection = SuccessWsConnectionSchema

// N201SuccessChannelCreation defines model for 201SuccessChannelCreation.
type N201SuccessChannelCreation = SuccessChannelCreation

// N201SuccessfulSignUp defines model for 201SuccessfulSignUp.
type N201SuccessfulSignUp = SuccessSignupSchema

// N400FailedChannelCreation An error code and message
type N400FailedChannelCreation = FailedSchema

// N400FailedChannelSubscribe An error code and message
type N400FailedChannelSubscribe = FailedSchema

// N400FailedSignUp An error code and message
type N400FailedSignUp = FailedSchema

// N400FailedWsConnection An error code and message
type N400FailedWsConnection = FailedSchema

// N401FailedLogin An error code and message
type N401FailedLogin = FailedSchema

// N401UnauthorizedError defines model for 401UnauthorizedError.
type N401UnauthorizedError = UnauthorizedSchema

// N500InternalServerError An error code and message
type N500InternalServerError = FailedSchema

// ChannelCreationRequest defines model for ChannelCreationRequest.
type ChannelCreationRequest = ChannelCreation

// ChannelSubscriptionRequest defines model for ChannelSubscriptionRequest.
type ChannelSubscriptionRequest = ChannelSubscription

// LoginRequest defines model for LoginRequest.
type LoginRequest = LoginSchema

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest = SignUpSchema

// PublicPostChannelsJSONRequestBody defines body for PublicPostChannels for application/json ContentType.
type PublicPostChannelsJSONRequestBody = ChannelCreation

// PublicPostChannelsSubscribeJSONRequestBody defines body for PublicPostChannelsSubscribe for application/json ContentType.
type PublicPostChannelsSubscribeJSONRequestBody = ChannelSubscription

// PublicPostSignupJSONRequestBody defines body for PublicPostSignup for application/json ContentType.
type PublicPostSignupJSONRequestBody = SignUpSchema

// PublicPostTokenJSONRequestBody defines body for PublicPostToken for application/json ContentType.
type PublicPostTokenJSONRequestBody = LoginSchema

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new channel
	// (POST /v1/chatty/channels)
	PublicPostChannels(ctx echo.Context) error
	// Subscribe to a channel
	// (POST /v1/chatty/channels/{name}/subscribe)
	PublicPostChannelsSubscribe(ctx echo.Context, name string) error
	// Connects to Chatty to send and receive messages
	// (GET /v1/chatty/chats/ws)
	PublicGetWs(ctx echo.Context) error
	// Registers a new user
	// (POST /v1/chatty/signup)
	PublicPostSignup(ctx echo.Context) error
	// Returns a token
	// (POST /v1/chatty/token)
	PublicPostToken(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PublicPostChannels converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostChannels(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostChannels(ctx)
	return err
}

// PublicPostChannelsSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostChannelsSubscribe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostChannelsSubscribe(ctx, name)
	return err
}

// PublicGetWs converts echo context to params.
func (w *ServerInterfaceWrapper) PublicGetWs(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicGetWs(ctx)
	return err
}

// PublicPostSignup converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostSignup(ctx)
	return err
}

// PublicPostToken converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostToken(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/chatty/channels", wrapper.PublicPostChannels)
	router.POST(baseURL+"/v1/chatty/channels/:name/subscribe", wrapper.PublicPostChannelsSubscribe)
	router.GET(baseURL+"/v1/chatty/chats/ws", wrapper.PublicGetWs)
	router.POST(baseURL+"/v1/chatty/signup", wrapper.PublicPostSignup)
	router.POST(baseURL+"/v1/chatty/token", wrapper.PublicPostToken)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYzW7jNhB+FYIt0IsR2e32olNTo1tksUWDOGkOgQ+0NLaYUKSWQzlwA797QVLWjyXZ",
	"clZBb7bIGX6c+eaH80YjlWZKgjRIwzeq4VsOaH5XMQf3YZ4wKUHMNTDDlbzz63YlUtKAdD9ZlgkeuQ3B",
	"Myppv2GUQMrsrx81rGlIfwiqowK/isGRerrf7yc0Bow0z9yHkN4nQApYxCgS2a1AGJHwSiIvTveTA9BF",
	"viqFPwhs/YgBgNFvX4H904L9VW346ECd0oXfeh6gsLstlgXfyIdsbDBe62A0yDcyz6jdpwEzJdET8efp",
	"dJFHESA23bCC8ZB26e91c3l+7GhZubRCus6Fc8XYCM/41y0TjgRLGC1cjzhXUkLkRcaFV9fdj/IvQGQb",
	"IAjS1JCKncc6a3qjzBAf4+xTCajYUmSeuAlvnQtP8LGBLVwc9JvPr7e9/Gk6/cy4gPijDOe19wPz67VU",
	"XQuNY3Djx/A5dHOVi5hIZZp5uQvjyH49h+wBQTtgBc9InHtogtsIAa2VbuD7kBA+h/IQtc6CFlcvyplX",
	"NW4CHEi+sqR9ms4eJMtNojT/F+I/HLyxwNQ190P68nhPjHoBl5FTjsjlhihNuNwywV06+XU6vZEGtGRi",
	"AXoLelyc54x2OJv4w4k/3e4rNHQ0gvZTplUG2hSdomSpC2Ozy4CGFI3mcmNv5z+0FlyB/5ZzDTENn7x4",
	"sXl5EKJq9QyR6envakqrfY3Lhm9HV72WnqIkUjEQJmOSekLTydF17AYvv2a5MDSclqC4NLABR/OD9Nnr",
	"OXXV/q4b1qt6y7oZQ3xVOra/10qnzNCw+jhpWz1H69N0ALRy56RS2IWv0chZQgrx95qGTxf0okurpreu",
	"D+STeql9XiklgMk+OqmX7qv0d3r/B46Tnu8+ZkJdThlIhyNQ6oUe5E+ganQgLVg8vsAol9DRgatxksen",
	"QHb0msMtyFNAw9JsIKhqfxegjmrQQjI4XfTnCZuVIco1Nzt3ilf8/Gquc5PYnytgGvTnAym+PN7TIpG7",
	"67vViiGJMZmvCVyu1aHksMiVHEgZFzSkWxDsSueIIH7b2G9XkUrppAgNeudWyD8gGG0Vl+vbG9cfqDTN",
	"pa1fQLgkGpgg1p7klZuEZAAanYWNONL4E5J5wozZEQS95ZGlxBY0eu3bmSNdBpJlnIb0l6vp1dQlMpM4",
	"wwTbWRA5+aDo8Xw6Vf6Fe9Qcus4Lj17pTr92WeompiG9zVeCR7cKzfygcVIbnOz6ynFjthL0DFbaz95Z",
	"v75iX9D/WvL94nkNva8G352cV9DTwji65mnK9O6EfQ3boGW9tyxdWqkOxwVvlnD7AOuvhoxploKx/LGl",
	"qD1bsDJErYlJyqdIYyxjU4x02dMkFaeL5FPFpNE5TGoN13H8Lic9pFpU74wEiE1stvVTL7YNNAlHUrLL",
	"wqqjxAwivuYQk9WO+LsPIOOidrH3srJritYxkBnCzN6pzXup2dAwHjcXzTHdJeQ0GLw6k2ygK6n4+oRW",
	"r89kPU78E8yjTyXvt/LxZOdiI7elZ0OkO15ZY3inKHQusssS97S0wVbLKi0Du/gGGbsGX0MEfAuHRh/P",
	"u7QYQfaWiTvYcLQZp0hkNqZPBKbvo94Tjc2B7HeWhmpSdTEpKrnx4q3HiGdcUza9fZ4xuZZWpX9xG0VW",
	"LufGtulY59okoKuEiye8du9OeofTGhP9/XeH89faKGNQJNbHLiN7rGHcTme5oLUKfDXOtW0fhYqYSBSa",
	"wLZry1Lu2HuZU0Oub2+wKsSF7v1y/18AAAD//4D/uY+sGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
