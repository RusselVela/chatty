// Package web provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package web

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	JwtAuthScopes = "jwtAuth.Scopes"
)

// Channel defines model for Channel.
type Channel struct {
	Id         string   `json:"id"`
	Members    []string `json:"members"`
	Name       string   `json:"name"`
	OwnerId    string   `json:"ownerId"`
	Visibility string   `json:"visibility"`
}

// ChannelCreation defines model for ChannelCreation.
type ChannelCreation struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

// ChannelSubscription defines model for ChannelSubscription.
type ChannelSubscription = map[string]interface{}

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// LoginSchema defines model for LoginSchema.
type LoginSchema struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// SignUpSchema defines model for SignUpSchema.
type SignUpSchema = LoginSchema

// SuccessChannelCreation defines model for SuccessChannelCreation.
type SuccessChannelCreation struct {
	Name string `json:"name"`
	Ok   bool   `json:"ok"`
}

// SuccessChannelSubscription defines model for SuccessChannelSubscription.
type SuccessChannelSubscription struct {
	Name string `json:"name"`
	Ok   bool   `json:"ok"`
}

// SuccessGetChannels defines model for SuccessGetChannels.
type SuccessGetChannels struct {
	Channels []Channel `json:"channels"`
}

// SuccessGetUsers defines model for SuccessGetUsers.
type SuccessGetUsers struct {
	Users []User `json:"users"`
}

// SuccessLoginSchema defines model for SuccessLoginSchema.
type SuccessLoginSchema struct {
	Ok    bool   `json:"ok"`
	Token string `json:"token"`
}

// SuccessSignupSchema defines model for SuccessSignupSchema.
type SuccessSignupSchema struct {
	Id       string `json:"id"`
	Ok       bool   `json:"ok"`
	Username string `json:"username"`
}

// SuccessWsConnectionSchema defines model for SuccessWsConnectionSchema.
type SuccessWsConnectionSchema struct {
	Ok        bool   `json:"ok"`
	Timestamp string `json:"timestamp"`
}

// UnauthorizedSchema defines model for UnauthorizedSchema.
type UnauthorizedSchema struct {
	Message string `json:"message"`
}

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Username string `json:"username"`
}

// N200SuccessChannelSubscribe defines model for 200SuccessChannelSubscribe.
type N200SuccessChannelSubscribe = SuccessChannelSubscription

// N200SuccessGetChannels defines model for 200SuccessGetChannels.
type N200SuccessGetChannels = SuccessGetChannels

// N200SuccessGetUsers defines model for 200SuccessGetUsers.
type N200SuccessGetUsers = SuccessGetUsers

// N200SuccessfulLogin defines model for 200SuccessfulLogin.
type N200SuccessfulLogin = SuccessLoginSchema

// N200SuccessfulWsConnection defines model for 200SuccessfulWsConnection.
type N200SuccessfulWsConnection = SuccessWsConnectionSchema

// N201SuccessChannelCreation defines model for 201SuccessChannelCreation.
type N201SuccessChannelCreation = SuccessChannelCreation

// N201SuccessfulSignUp defines model for 201SuccessfulSignUp.
type N201SuccessfulSignUp = SuccessSignupSchema

// N400BadRequest defines model for 400BadRequest.
type N400BadRequest = ErrorMessage

// N401UnauthorizedError defines model for 401UnauthorizedError.
type N401UnauthorizedError = UnauthorizedSchema

// N500InternalServerError defines model for 500InternalServerError.
type N500InternalServerError = ErrorMessage

// ChannelCreationRequest defines model for ChannelCreationRequest.
type ChannelCreationRequest = ChannelCreation

// ChannelSubscriptionRequest defines model for ChannelSubscriptionRequest.
type ChannelSubscriptionRequest = ChannelSubscription

// LoginRequest defines model for LoginRequest.
type LoginRequest = LoginSchema

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest = SignUpSchema

// PublicPostChannelsJSONRequestBody defines body for PublicPostChannels for application/json ContentType.
type PublicPostChannelsJSONRequestBody = ChannelCreation

// PublicPostChannelsSubscribeJSONRequestBody defines body for PublicPostChannelsSubscribe for application/json ContentType.
type PublicPostChannelsSubscribeJSONRequestBody = ChannelSubscription

// PublicPostSignupJSONRequestBody defines body for PublicPostSignup for application/json ContentType.
type PublicPostSignupJSONRequestBody = SignUpSchema

// PublicPostTokenJSONRequestBody defines body for PublicPostToken for application/json ContentType.
type PublicPostTokenJSONRequestBody = LoginSchema

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of channels
	// (GET /v1/chatty/channels)
	PublicGetChannels(ctx echo.Context) error
	// Creates a new channel
	// (POST /v1/chatty/channels)
	PublicPostChannels(ctx echo.Context) error
	// Subscribe to a channel
	// (POST /v1/chatty/channels/{id}/subscribe)
	PublicPostChannelsSubscribe(ctx echo.Context, id string) error
	// Connects to Chatty to send and receive messages
	// (GET /v1/chatty/chats/ws)
	PublicGetWs(ctx echo.Context) error
	// Registers a new user
	// (POST /v1/chatty/signup)
	PublicPostSignup(ctx echo.Context) error
	// Returns a token
	// (POST /v1/chatty/token)
	PublicPostToken(ctx echo.Context) error
	// Returns a list of users
	// (GET /v1/chatty/users)
	PublicGetUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PublicGetChannels converts echo context to params.
func (w *ServerInterfaceWrapper) PublicGetChannels(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicGetChannels(ctx)
	return err
}

// PublicPostChannels converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostChannels(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostChannels(ctx)
	return err
}

// PublicPostChannelsSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostChannelsSubscribe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostChannelsSubscribe(ctx, id)
	return err
}

// PublicGetWs converts echo context to params.
func (w *ServerInterfaceWrapper) PublicGetWs(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicGetWs(ctx)
	return err
}

// PublicPostSignup converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostSignup(ctx)
	return err
}

// PublicPostToken converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostToken(ctx)
	return err
}

// PublicGetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PublicGetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicGetUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/chatty/channels", wrapper.PublicGetChannels)
	router.POST(baseURL+"/v1/chatty/channels", wrapper.PublicPostChannels)
	router.POST(baseURL+"/v1/chatty/channels/:id/subscribe", wrapper.PublicPostChannelsSubscribe)
	router.GET(baseURL+"/v1/chatty/chats/ws", wrapper.PublicGetWs)
	router.POST(baseURL+"/v1/chatty/signup", wrapper.PublicPostSignup)
	router.POST(baseURL+"/v1/chatty/token", wrapper.PublicPostToken)
	router.GET(baseURL+"/v1/chatty/users", wrapper.PublicGetUsers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
