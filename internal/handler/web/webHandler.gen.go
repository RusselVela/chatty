// Package web provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package web

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	JwtAuthScopes = "jwtAuth.Scopes"
)

// Channel defines model for Channel.
type Channel struct {
	Id         string   `json:"id"`
	Members    []string `json:"members"`
	Name       string   `json:"name"`
	OwnerId    string   `json:"ownerId"`
	Visibility string   `json:"visibility"`
}

// ChannelCreation defines model for ChannelCreation.
type ChannelCreation struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

// ChannelSubscription defines model for ChannelSubscription.
type ChannelSubscription = map[string]interface{}

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// LoginSchema defines model for LoginSchema.
type LoginSchema struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// SignUpSchema defines model for SignUpSchema.
type SignUpSchema = LoginSchema

// SuccessChannelCreation defines model for SuccessChannelCreation.
type SuccessChannelCreation struct {
	Id      string `json:"id"`
	Name    string `json:"name"`
	OwnerId string `json:"ownerId"`
}

// SuccessChannelSubscription defines model for SuccessChannelSubscription.
type SuccessChannelSubscription struct {
	Name string `json:"name"`
	Ok   bool   `json:"ok"`
}

// SuccessGetChannels defines model for SuccessGetChannels.
type SuccessGetChannels struct {
	Channels []Channel `json:"channels"`
}

// SuccessGetUsers defines model for SuccessGetUsers.
type SuccessGetUsers struct {
	Users []User `json:"users"`
}

// SuccessLoginSchema defines model for SuccessLoginSchema.
type SuccessLoginSchema struct {
	Token string `json:"token"`
}

// SuccessSignupSchema defines model for SuccessSignupSchema.
type SuccessSignupSchema struct {
	Id       string `json:"id"`
	Ok       *bool  `json:"ok,omitempty"`
	Username string `json:"username"`
}

// SuccessWsConnectionSchema defines model for SuccessWsConnectionSchema.
type SuccessWsConnectionSchema struct {
	Ok        bool   `json:"ok"`
	Timestamp string `json:"timestamp"`
}

// UnauthorizedSchema defines model for UnauthorizedSchema.
type UnauthorizedSchema struct {
	Message string `json:"message"`
}

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Username string `json:"username"`
}

// N200SuccessChannelSubscribe defines model for 200SuccessChannelSubscribe.
type N200SuccessChannelSubscribe = SuccessChannelSubscription

// N200SuccessGetChannels defines model for 200SuccessGetChannels.
type N200SuccessGetChannels = SuccessGetChannels

// N200SuccessGetUsers defines model for 200SuccessGetUsers.
type N200SuccessGetUsers = SuccessGetUsers

// N200SuccessfulLogin defines model for 200SuccessfulLogin.
type N200SuccessfulLogin = SuccessLoginSchema

// N200SuccessfulWsConnection defines model for 200SuccessfulWsConnection.
type N200SuccessfulWsConnection = SuccessWsConnectionSchema

// N201SuccessChannelCreation defines model for 201SuccessChannelCreation.
type N201SuccessChannelCreation = SuccessChannelCreation

// N201SuccessfulSignUp defines model for 201SuccessfulSignUp.
type N201SuccessfulSignUp = SuccessSignupSchema

// N400BadRequest defines model for 400BadRequest.
type N400BadRequest = ErrorMessage

// N401UnauthorizedError defines model for 401UnauthorizedError.
type N401UnauthorizedError = UnauthorizedSchema

// N500InternalServerError defines model for 500InternalServerError.
type N500InternalServerError = ErrorMessage

// ChannelCreationRequest defines model for ChannelCreationRequest.
type ChannelCreationRequest = ChannelCreation

// ChannelSubscriptionRequest defines model for ChannelSubscriptionRequest.
type ChannelSubscriptionRequest = ChannelSubscription

// LoginRequest defines model for LoginRequest.
type LoginRequest = LoginSchema

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest = SignUpSchema

// PublicPostChannelsJSONRequestBody defines body for PublicPostChannels for application/json ContentType.
type PublicPostChannelsJSONRequestBody = ChannelCreation

// PublicPostChannelsSubscribeJSONRequestBody defines body for PublicPostChannelsSubscribe for application/json ContentType.
type PublicPostChannelsSubscribeJSONRequestBody = ChannelSubscription

// PublicPostSignupJSONRequestBody defines body for PublicPostSignup for application/json ContentType.
type PublicPostSignupJSONRequestBody = SignUpSchema

// PublicPostTokenJSONRequestBody defines body for PublicPostToken for application/json ContentType.
type PublicPostTokenJSONRequestBody = LoginSchema

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of channels
	// (GET /v1/chatty/channels)
	PublicGetChannels(ctx echo.Context) error
	// Creates a new channel
	// (POST /v1/chatty/channels)
	PublicPostChannels(ctx echo.Context) error
	// Subscribe to a channel
	// (POST /v1/chatty/channels/{id}/subscribe)
	PublicPostChannelsSubscribe(ctx echo.Context, id string) error
	// Connects to Chatty to send and receive messages
	// (GET /v1/chatty/chats/ws)
	PublicGetWs(ctx echo.Context) error
	// Registers a new user
	// (POST /v1/chatty/signup)
	PublicPostSignup(ctx echo.Context) error
	// Returns a token
	// (POST /v1/chatty/token)
	PublicPostToken(ctx echo.Context) error
	// Returns a list of users
	// (GET /v1/chatty/users)
	PublicGetUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PublicGetChannels converts echo context to params.
func (w *ServerInterfaceWrapper) PublicGetChannels(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicGetChannels(ctx)
	return err
}

// PublicPostChannels converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostChannels(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostChannels(ctx)
	return err
}

// PublicPostChannelsSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostChannelsSubscribe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostChannelsSubscribe(ctx, id)
	return err
}

// PublicGetWs converts echo context to params.
func (w *ServerInterfaceWrapper) PublicGetWs(ctx echo.Context) error {
	var err error

	ctx.Set(JwtAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicGetWs(ctx)
	return err
}

// PublicPostSignup converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostSignup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostSignup(ctx)
	return err
}

// PublicPostToken converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostToken(ctx)
	return err
}

// PublicGetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PublicGetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicGetUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/chatty/channels", wrapper.PublicGetChannels)
	router.POST(baseURL+"/v1/chatty/channels", wrapper.PublicPostChannels)
	router.POST(baseURL+"/v1/chatty/channels/:id/subscribe", wrapper.PublicPostChannelsSubscribe)
	router.GET(baseURL+"/v1/chatty/chats/ws", wrapper.PublicGetWs)
	router.POST(baseURL+"/v1/chatty/signup", wrapper.PublicPostSignup)
	router.POST(baseURL+"/v1/chatty/token", wrapper.PublicPostToken)
	router.GET(baseURL+"/v1/chatty/users", wrapper.PublicGetUsers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
