// Package web provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package web

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// FailedSchema defines model for FailedSchema.
type FailedSchema struct {
	Error *string `json:"error,omitempty"`
	Ok    *bool   `json:"ok,omitempty"`
}

// InternalServerErrorSchema defines model for InternalServerErrorSchema.
type InternalServerErrorSchema struct {
	Error *string `json:"error,omitempty"`
}

// LoginSchema defines model for LoginSchema.
type LoginSchema struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostMessageSchema defines model for PostMessageSchema.
type PostMessageSchema struct {
	Message   string `json:"message"`
	Recipient string `json:"recipient"`
}

// SuccessLoginSchema defines model for SuccessLoginSchema.
type SuccessLoginSchema struct {
	Ok    *bool   `json:"ok,omitempty"`
	Token *string `json:"token,omitempty"`
}

// SuccessPostMessageSchema defines model for SuccessPostMessageSchema.
type SuccessPostMessageSchema struct {
	Message   *string `json:"message,omitempty"`
	Ok        *bool   `json:"ok,omitempty"`
	Recipient *string `json:"recipient,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// N200SuccessfulLogin defines model for 200SuccessfulLogin.
type N200SuccessfulLogin = SuccessLoginSchema

// N200SuccessfulPostMessage defines model for 200SuccessfulPostMessage.
type N200SuccessfulPostMessage = SuccessPostMessageSchema

// N400FailedPostMessage defines model for 400FailedPostMessage.
type N400FailedPostMessage = FailedSchema

// N401FailedLogin defines model for 401FailedLogin.
type N401FailedLogin = FailedSchema

// N500InternalServerError defines model for 500InternalServerError.
type N500InternalServerError = InternalServerErrorSchema

// LoginRequest defines model for LoginRequest.
type LoginRequest = LoginSchema

// PostMessageRequest defines model for PostMessageRequest.
type PostMessageRequest = PostMessageSchema

// PublicPostMessageJSONRequestBody defines body for PublicPostMessage for application/json ContentType.
type PublicPostMessageJSONRequestBody = PostMessageSchema

// PublicPostLoginJSONRequestBody defines body for PublicPostLogin for application/json ContentType.
type PublicPostLoginJSONRequestBody = LoginSchema

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sends a message to a user or channel
	// (POST /chatty/chats/postMessage)
	PublicPostMessage(ctx echo.Context) error
	// Authenticates a user on Chatty
	// (POST /chatty/login)
	PublicPostLogin(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PublicPostMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostMessage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostMessage(ctx)
	return err
}

// PublicPostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PublicPostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicPostLogin(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/chatty/chats/postMessage", wrapper.PublicPostMessage)
	router.POST(baseURL+"/chatty/login", wrapper.PublicPostLogin)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWzW7jNhB+FYIt0IuwUtrtRbe06AJZbIFgk3YPRQ4MNbaYpUiWQ9lwDb97MaRsyZEU",
	"C133JIocfvzmf/Zc2sZZAyYgL/fcw98tYPjFVgrixie7VuZz2qV/aU0AE5fCOa2kCMqa/AWtoT2UNTSC",
	"Vt97WPGSf5f3D+TpFPMI+pBED4dDxitA6ZUjKF7yxxpYR4QFyzRJ80PG7y2G3wFRrOHajAbQi3khmIoJ",
	"ZmDLmnSV0x0P6KzBZL4fi+KhlRIQV62Oal+Ncod7wZbxmClkeKJBpjzjNVD+2uwW2bUTIIOGAU+9I6bv",
	"i+KDUBqq/4NlQr7MzNiQ2FUtkOulVvQH3lufSN4kqOu6+BK9dN4nyPvi5g8j2lBbr/6B6rdIr9y/uvXx",
	"yyML9ivEsGgUojJrZj1TZiO0qgjo56K4MwG8EfoB/Ab8Ceoqek1gzyt5FGZJmiUqJNfB0Wtnlir33Hnr",
	"wIeuiMGRfdg54CXH4JVZk6L262D72VoNwkTsbss+v4AMJDnPefFzU7DD9B0BOYG4tb6i9cr6RgRe9pvZ",
	"WJ0WiWMD049T7VIeKl7+1UtmPeDTBL9xAo9YNn1Sjgh5kMqpLmDeZtSLZifIKUYTdW9EadqtGY9hv9Ca",
	"h/m3v9Eoc+zeMlbGg2oAg2jcosii9ADZehV2kWJi9bINt22oafkMwoP/cLTDxy+PvMuoyCqe9kapQ3Ap",
	"OZVZ2WMhEDJSTRHHP7eIoNmfoAUfZfHt/V0snLZpWkNVA5gyzIPQjBRjWxVq5gA80qMq6FeIPyD7tRYh",
	"7BiC3yhJgbsBjwl9cxPt6sAIp3jJf3pXvCtiaIc6Kp7LeDl+MHfnrYR+x2XyAUyFTBx7O7EXjNKGaqWs",
	"hTGgeXzUxxp4V/GS37fPWslhq8oGM9VurjCejV35xJwzMVfMY3Vy+WyTT231MsBk7019ZsnliWaUesvl",
	"yzMNKIZ12zTC75Z7KIg1UoFJvuFPBHKMB33s19MxQMkCJsR4xRO46ULxDe+nOeA/+P5s3v52r38ajAaL",
	"XDYcY67qrIumHLsp1jDCo/09b73mJddWCl1bDDkl/dPp3mvXuQjDbu/vqKJ0JarDPjwd/g0AAP//20pB",
	"zfkMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
