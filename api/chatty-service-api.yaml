openapi: 3.0.0
info:
  title: Russel Vela's Chatty service
  version: v1
  description: API to communicate in real time with peers
  contact:
    name: Russel Vela
    email: vela.russel@gmail.com
servers:
  - url: localhost/v1
tags:
  - name: Public
    description: public APIs
paths:
  /v1/chatty/signup:
    post:
      summary: Registers a new user
      description: Registers a new user
      operationId: public-post-signup
      tags:
        - Public
      requestBody:
        $ref: '#/components/requestBodies/SignUpRequest'
      responses:
        201:
          $ref: '#/components/responses/201SuccessfulSignUp'
        400:
          $ref: '#/components/responses/400FailedSignUp'
        500:
          $ref: '#/components/responses/500InternalServerError'
  /v1/chatty/token:
    post:
      summary: Returns a token
      description:  Returns a token to be used in further operations
      operationId: public-post-token
      tags:
        - Public
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        200:
          $ref: '#/components/responses/200SuccessfulLogin'
        401:
          $ref: '#/components/responses/401FailedLogin'
        500:
          $ref: '#/components/responses/500InternalServerError'
  /v1/chatty/chats/ws:
    get:
      summary: Connects to Chatty to send and receive messages
      description: Connects to Chatty
      operationId: public-get-ws
      tags:
        - Public
      responses:
        200:
          $ref: '#/components/responses/200SuccessfulWsConnection'
        400:
          $ref: '#/components/responses/400FailedWsConnection'
        401:
          $ref: '#/components/responses/401UnauthorizedError'
        500:
          $ref: '#/components/responses/500InternalServerError'
      security:
        - jwtAuth: []
  /v1/chatty/channels:
    post:
      summary: Creates a new channel
      description: Creates a new channel
      operationId: public-post-channels
      tags:
        - Public
      requestBody:
        $ref: '#/components/requestBodies/ChannelCreationRequest'
      responses:
        201:
          $ref: '#/components/responses/201SuccessChannelCreation'
        400:
          $ref: '#/components/responses/400FailedChannelCreation'
        500:
          $ref: '#/components/responses/500InternalServerError'
  /v1/chatty/channels/{name}/subscribe:
    parameters:
      - name: name
        in: path
        description: The name of the channel to subscribe
        required: true
        schema:
          type: string
    post:
      summary: Subscribe to a channel
      description: Subscribe the user invoking this operation to the channel specified by {name}
      operationId: public-post-channels-subscribe
      tags:
        - Public
      requestBody:
        $ref: "#/components/requestBodies/ChannelSubscriptionRequest"
      responses:
        200:
          $ref: '#/components/responses/200SuccessChannelSubscribe'
        400:
          $ref: '#/components/responses/400FailedChannelSubscribe'
        500:
          $ref: '#/components/responses/500InternalServerError'
components:
  requestBodies:
    SignUpRequest:
      description: The request to signup
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignUpSchema'
    LoginRequest:
      description: The request to login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginSchema'
    ChannelSubscriptionRequest:
      description: The request to subscribe to a new channel
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChannelSubscription'
    ChannelCreationRequest:
      description: The request to create a new channel
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChannelCreation'
  responses:
    201SuccessfulSignUp:
      description: Signup is successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessSignupSchema'
    400FailedSignUp:
      description: User not created due to client error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FailedSchema'
    200SuccessfulLogin:
      description: Login is successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessLoginSchema'
    401FailedLogin:
      description: Failed login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FailedSchema'
    200SuccessfulWsConnection:
      description: Message sent successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessWsConnectionSchema'
    400FailedWsConnection:
      description: Message not sent due to client error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FailedSchema'
    200SuccessChannelSubscribe:
      description: Subscribed to channel
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessChannelSubscription'
    400FailedChannelSubscribe:
      description: Could not subscribe to channel
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FailedSchema'
    201SuccessChannelCreation:
      description: Channel created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessChannelCreation'
    400FailedChannelCreation:
      description: Failed to create channel
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FailedSchema'
    401UnauthorizedError:
      description: JWT token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedSchema'
    500InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FailedSchema'

  schemas:
    SignUpSchema:
      allOf:
        - $ref: '#/components/schemas/LoginSchema'
    SuccessSignupSchema:
      type: object
      required:
        - ok
        - username
        - id
      properties:
        ok:
          type: boolean
        username:
          type: string
        id:
          type: string
    LoginSchema:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    SuccessLoginSchema:
      type: object
      required:
        - ok
        - token
      properties:
        ok:
          type: boolean
        token:
          type: string
          format: password
    ChannelSubscription:
      type: object
    SuccessChannelSubscription:
      type: object
      required:
        - name
        - ok
      properties:
        name:
          type: string
        ok:
          type: boolean
    ChannelCreation:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
    SuccessChannelCreation:
      type: object
      required:
        - name
        - ok
      properties:
        name:
          type: string
        ok:
          type: boolean
    FailedSchema:
      type: object
      description: An error code and message
      properties:
        code:
          type: integer
          default: 0
        message:
          type: string
      required:
        - code
        - message
    SuccessWsConnectionSchema:
      type: object
      required:
        - ok
        - timestamp
      properties:
        ok:
          type: boolean
        timestamp:
          type: string
    UnauthorizedSchema:
      type: object
      required:
        - message
      properties:
        message:
          type: string

  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
